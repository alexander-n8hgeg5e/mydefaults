// Sample pdnsd configuration file. Must be customized to obtain a working pdnsd setup!
// Read the pdnsd.conf(5) manpage for an explanation of the options.
// Add or remove '#' in front of options you want to disable or enable, respectively.
// Remove '/*' and '*/' to enable complete sections.

global {
    run_ipv4=on;
	perm_cache=50222000;
	cache_dir="/var/cache/pdnsd";
    pid_file = /var/run/pdnsd.pid;
	run_as="pdnsd";
    proc_limit=10000;
    procq_limit=5000000;
	server_ip = 127.0.0.1;
	status_ctl = on;
 	paranoid=off;       
	par_queries=4;
	query_method=udp_tcp;
	min_ttl=1w;
	max_ttl=52w;        # One week.
	timeout=1;        # Global timeout option (10 seconds).
	neg_domain_pol=auth;
	udpbufsize=1024;   # Upper limit on the size of UDP messages.
}

server {
    preset=off;
	label= "fritzbox";
	ip = 192.168.178.1;
	timeout=2;         
	uptest=ping;       
	interval=10s;      
	purge_cache=off; 
	edns_query=on;
}


# The servers provided by OpenDNS are fast, but they do not reply with
# NXDOMAIN for non-existant domains, instead they supply you with an
# address of one of their search engines. They also lie about the addresses of 
# of the search engines of google, microsoft and yahoo.
# If you do not like this behaviour the "reject" option may be useful.
server {
	label = "opendns";
	ip = 208.67.222.222, 208.67.220.220;
	reject = 208.69.32.0/24,  # You may need to add additional address ranges
	         208.69.34.0/24,  # here if the addresses of their search engines
	         208.67.219.0/24; # change.
	reject_policy = fail;     # If you do not provide any alternative server
	                          # sections, like the following root-server
	                          # example, "negate" may be more appropriate here.
 	edns_query = yes;	# Use EDNS for outgoing queries to allow UDP messages
	timeout = 4;
	uptest = ping;            # Test availability using ICMP echo requests.
        ping_timeout = 100;       # ping test will time out after 10 seconds.
	interval = 15m;           # Test every 15 minutes.
	preset = off;
}


server {
	label = "root-servers";
	root_server = discover; # Query the name servers listed below
				# to obtain a full list of root servers.
	randomize_servers = on; # Give every root server an equal chance
	                        # of being queried.
	ip = 	198.41.0.4,     # This list will be expanded to the full
		192.228.79.201; # list on start up.
	timeout = 5;
	uptest = query;         # Test availability using empty DNS queries.
#	query_test_name = .;    # To be used if remote servers ignore empty queries.
	interval = 30m;         # Test every half hour.
	ping_timeout = 300;     # Test should time out after 30 seconds.
	purge_cache = off;
 	edns_query = yes;	# Use EDNS for outgoing queries to allow UDP messages
			   	# larger than 512 bytes. May cause trouble with some
			   	# legacy systems.
	policy = included;
	preset = off;
}

source {
	owner=localhost;
	serve_aliases=on;
	file="/etc/hosts";
}


rr {
	name=pc;
	reverse=on;
    cname=pc1;
    cname=pc2;
	owner=esadc;
	soa=esadc,root.esadworld,1,30,30,31536000,3600;
}


neg {
	name=doubleclick.net;
	types=domain;   # This will also block xxx.doubleclick.net, etc.
}


# vim:set syntax=c foldnestmax=2 foldlevel=2:

# Generated by resolvconf
server {
	label=resolvconf;
}
# End of resolvconf
